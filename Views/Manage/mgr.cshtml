@*@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
    @Html.AntiForgeryToken()*@
@using Kendo.Mvc.UI

@{ ViewData["Title"] = "Manage";
    Layout = "~/Views/Shared/_Layout.cshtml"; }

<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <h5 class="text-info">จัดการบัญชีผู้ใช้งาน</h5>
    </div>
</div>

<div class="row">
    <div class="col-lg-6 col-md-6 k-i-margin-to">
        <form method="post" action='@Url.Action("Search")'>
            <table class="table-responsive border-0">
                <tr>
                    <td>
                        @(Html.Kendo().TextBox()
                        .Name("AccountName")
                        .Placeholder("LogonName")
                        .Label(label => label
                        .Content("LogonName")
                        )
                        .HtmlAttributes(new { placeholder = "LogonName", required = "required", validationmessage = "Enter {0}" })
                        )
                    </td>
                    <td>
                        @(Html.Kendo().Button()
                        .Name("BtnSearch")
                        .HtmlAttributes(new { type = "submit", @class = "k-primary" })
                        .Content("เพิ่มบัญชีผู้ใช้งาน"))
                    </td>
                </tr>
            </table>
        </form>
    </div>
</div>


<script>
    function onRequestEnd(e) {
        if (e.type === "update") {
            kendo.alert("ดำเนินการเปลี่ยนแปลงข้อมูลเสร็จเรียบร้อย");
        } else if (e.type === "create") {
            kendo.alert("ดำเนินการเพิ่มผู้ใช้งานเสร็จเรียบร้อย");
        } else if (e.type === "destroy") {
            kendo.alert("ดำเนินการลบข้อมูลเสร็จเรียบร้อย");
        }
    }
</script>

<div class="form-group">
    @(Html.Kendo().DataSource<SmartMotor.Models.UserViewModel>()
        .Name("GridDataSource")
        .Ajax( dataSource => {
            dataSource
                .Batch(true)
                .Model(model =>
                {
                    model.Id(p => p.UserId);
                    model.Field(p => p.UserId).Editable(false);
                    model.Field(p => p.LogonName).Editable(false);
                    model.Field(p => p.DisplayName).Editable(false);
                    model.Field(p => p.Created).Editable(false);

                    model.Field(p => p.CreatedBy).Editable(false);
                    model.Field(p => p.Updated).Editable(false);
                    model.Field(p => p.UpdatedBy).Editable(false);
                })
                .Read(read => read.Action("Users_Read", "Manage"))
                .Update(update => update.Action("Users_Update", "Manage"))
                .Destroy(destroy => destroy.Action("Users_Destroy", "Manage"))
                .PageSize(15)
                .Events(e => e.RequestEnd("onRequestEnd"));
        })
        )
</div>



<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12">
        @(Html.Kendo().Grid<SmartMotor.Models.UserViewModel>
    ()
    .Name("Grid")
    .Columns(columns =>
    {
        columns.Bound(o => o.UserId).Width(100).Title("ลำดับ").Groupable(false).HeaderHtmlAttributes(new { style = "text-align: center;" }).Filterable(false);

        columns.Bound(o => o.LogonName).Title("LogonName").HeaderHtmlAttributes(new { style = "text-align: center;" }).Width(120).Filterable(false);

        columns.Bound(o => o.DisplayName).Title("Display Name").HeaderHtmlAttributes(new { style = "text-align: center;" }).Width(180).Filterable(false);

        columns.Bound(o => o.IsActive).Title("IsActive").HeaderHtmlAttributes(new { style = "text-align: center;" }).Width(120).Filterable(false);

        columns.ForeignKey(p => p.Role.RoleID, (System.Collections.IEnumerable)ViewData["roles"], "RoleID", "RoleName")
        .Title("Role").HeaderHtmlAttributes(new { style = "text-align: center;" }).Width(120);

        columns.Bound(o => o.Updated).Title("Updated").Format("{0:dd/MM/yyyy}").HeaderHtmlAttributes(new { style = "text-align: center;" }).Width(140).Filterable(false);

        columns.Bound(o => o.UpdatedBy).Title("Updated By").HeaderHtmlAttributes(new { style = "text-align: center;" }).Width(120).Filterable(false);

        columns.Command(command => { command.Destroy(); }).Width(140).HeaderHtmlAttributes(new { style = "text-align: center;" });
    })
    .ToolBar(toolbar =>
    {
        toolbar.Save();
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .HtmlAttributes(new { style = "height:430px;" })
    .Pageable(pager => pager
    .Input(true)
    .Numeric(true)
    .Info(true)
    .PreviousNext(true)
    .Refresh(true)
    )
    .Scrollable()
    .HtmlAttributes(new
    {
        style = "width: 100%;font-family: DB-Ozone-X; font-size:14pt;"
    })
    .DataSource("GridDataSource")
    //.Events(events => events.SaveChanges("saveChanges"))
    .Resizable(resize => resize.Columns(true))
    )
    </div>
</div>


<script>
    function onClick() {
        return kendo.antiForgeryTokens();
    }

    function templateRoleCell(data) {
        var template = "";

        if (data.dirtyFields.IsRole) {
            template += "<span class='k-dirty'></span>"
        }
        template += o.IsRole.RoleName;

        return template;
    }

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    function saveChanges(e) {
        if (!confirm("คุณต้องการบันทึกข้อมูล หรือไม่?")) {
            e.preventDefault();
        }
    }

    function Remove(e) {
        if (!confirm("คุณต้องการลบข้อมูล หรือไม่?")) {
            e.preventDefault();
        }
    }
</script>


<style>
    .k-readonly {
        color: gray;
    }

    .k-grid .k-grid-search {
        margin-left: auto;
        margin-right: 0;
    }

    .k-dialog .k-window-titlebar .k-dialog-title {
        visibility: hidden;
    }
</style>
